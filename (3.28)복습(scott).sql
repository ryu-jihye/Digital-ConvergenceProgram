--CAFENAME은 NULL값을 가질 수 없다
--EMPLOYEENUM은 같은 값이 있을 수 없다
--PRICE의 값이 입력되지 않을 경우 기본값 10000원, 최소 값 3000원 지정함

CREATE TABLE NEWCAFE (
CAFENAME VARCHAR2(20) NOT NULL,
EMPLOYEENUM NUMBER UNIQUE,
PRICE NUMBER DEFAULT 10000 CHECK(PRICE > 3000),
PRIMARY KEY(CAFENAME, EMPLOYEENUM)
);

SELECT * FROM NEWCAFE;

--부모테이블의 데이터가 삭제되는 경우 자식테이블의 데이터 연쇄 삭제
--REFERENCES NEWDRAMA(ID) ON DELETE CASCADE

CREATE TABLE NEWDRAMA (
ID NUMBER NOT NULL,
NAME VARCHAR2(40),
PERPRICE NUMBER,
ACTORS VARCHAR2(40),
BROADNUM NUMBER
);


INSERT INTO NEWDRAMA(ID, NAME, PERPRICE, ACTORS, BROADNUM)
VALUES (001, '빈센조', 10000, '송중기 외', 2000);

INSERT INTO NEWDRAMA(ID, NAME, PERPRICE, ACTORS, BROADNUM)
VALUES (002, '승리호', 25000, '김태리 외', 2000);

INSERT INTO NEWDRAMA(ID, NAME, PERPRICE, ACTORS, BROADNUM)
VALUES (030, '응답하라1988', 30000, '혜리 외', 1500);

INSERT INTO NEWDRAMA(ID, NAME, PERPRICE, ACTORS, BROADNUM)
VALUES (025, '노는 언니', 14000, '박세리 외', 3000);

--번호(ID)가 10이하만 출력
SELECT * 
FROM NEWDRAMA
WHERE ID < 10;

--방송국번호(BROADNUM)이 2000 ~ 3000 출력
SELECT * 
FROM NEWDRAMA
WHERE BROADNUM BETWEEN 2000 AND 3000;

DROP TABLE NEWDRAMA;

CREATE TABLE S_EMP (
ID             NUMBER(7) NOT NULL ,     
LAST_NAME      VARCHAR2(25) NOT NULL,  
FIRST_NAME              VARCHAR2(25),  
USERID                  VARCHAR2(8),   
START_DATE              DATE,          
COMMENTS                VARCHAR2(255), 
MANAGER_ID              NUMBER(7),     
TITLE                   VARCHAR2(25),  
DEPT_ID                 NUMBER(7),     
SALARY                  NUMBER(11,2),  
COMMISSION_PCT          NUMBER(4,2)
);

CREATE TABLE S_DEPT (
ID        NUMBER(7) NOT NULL, 
NAME      VARCHAR2(25),
LOC       VARCHAR2(25)
);


SELECT * FROM EMP;

INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID,
TITLE, DEPT_ID, SALARY, COMMISSION_PCT)
VALUES (7369, 'SMITH', 'S', 369, '2017/12/08', 'YELLOW', 001, 'S_NAME', 777, 800, NULL);

INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID,
TITLE, DEPT_ID, SALARY, COMMISSION_PCT)
VALUES (7499, 'ALLEN', 'A', 499, '2017/02/20', 'RED', 005, 'A_NAME', 444, 1600, 30);

INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID,
TITLE, DEPT_ID, SALARY, COMMISSION_PCT)
VALUES (7521, 'WARD', 'W', 521, '2022/02/18', 'GREEN', 007, 'W_NAME', 555, 1250, 30);

INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID,
TITLE, DEPT_ID, SALARY, COMMISSION_PCT)
VALUES (7566, 'JONES', 'J', 566, '2002/04/18', 'BLUE', 006, 'J_NAME', 333, 2975, 20);

INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID,
TITLE, DEPT_ID, SALARY, COMMISSION_PCT)
VALUES (7654, 'MARTIN', 'M', 654, '2008/04/02', 'PURPLE', 002, 'M_NAME', 666, 1250, 20);

SELECT * FROM S_EMP;

SELECT * FROM DEPT;

DESC S_DEPT;

INSERT INTO S_DEPT(ID, NAME, LOC)
VALUES(002, 'SMITH', 'SEOUL');

INSERT INTO S_DEPT(ID, NAME, LOC)
VALUES(001, 'JOHN', 'DALLAS');

INSERT INTO S_DEPT(ID, NAME, LOC)
VALUES(003, 'KAL', 'NEW YORK');

SELECT * FROM S_DEPT;

SELECT * FROM EMP;


--------------------------------------------------------------
SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE DEPTNO = 20;

--뷰 생성하기
CREATE VIEW VW_EMP20
AS (SELECT EMPNO, ENAME, JOB, DEPTNO
    FROM EMP
    WHERE DEPTNO = 20);
    
SELECT * FROM VW_EMP20;

--인라인 뷰
WITH E AS (SELECT * FROM EMP ORDER BY EMPNO DESC)
SELECT ROWNUM, E.*
FROM E;

--급여가 높은 상위 10명 데이터 출력하기
WITH E AS (SELECT * FROM EMP ORDER BY SAL DESC)
SELECT ROWNUM, E.*
FROM E
WHERE ROWNUM<=10;


--시퀀스
CREATE TABLE SAL_SEQUENCE
    AS SELECT * FROM SALGRADE
    WHERE 1<>1; --열만 만듦
    
SELECT * FROM sal_sequence;

INSERT INTO SAL_SEQUENCE(GRADE, LOSAL, HISAL)
VALUES(SEQ_SAL_SEQUENCE.NEXTVAL, 1500, 2500);

CREATE SEQUENCE SEQ_SAL_SEQUENCE
INCREMENT BY 10
START WITH 10
MAXVALUE 90
MINVALUE 0
NOCYCLE
CACHE 2;

SELECT SEQ_SAL_SEQUENCE.CURRAVAL
FROM DUAL;

ALTER SEQUENCE SEQ_SAL_SEQUENCE
INCREMENT BY 3
MAXVALUE 99
CYCLE;


--트랜잭션
CREATE TABLE DEPT_TCL2
AS SELECT * FROM DEPT; --DEPT값 가져와서 DEPT_TCL2에 넣기
 
INSERT INTO DEPT_TCL2 VALUES(50, 'DATABASE', 'SEOUL');
UPDATE DEPT_TCL2 SET LOC = 'BUSAN' WHERE DEPTNO = 40;

COMMIT;

DELETE FROM DEPT_TCL2 WHERE DNAME = 'RESEARCH';

COMMIT;

SELECT * FROM DEPT_TCL2;

UPDATE DEPT_TCL2 SET LOC = 'SEOUL'
WHERE DEPTNO = 30;

SELECT * FROM DEPT_TCL2;

--사용자 생성
CREATE USER C##GLOBAL
        IDENTIFIED BY ORACLE;
    
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE
TO C##GLOBAL;

-- GLOBAL에 권한 부여
GRANT SELECT , INSERT
ON TEMP
TO C##GLOBAL;
 
--GLOBAL에 권한 회수
REVOKE SELECT, INSERT
ON TEMP
FROM C##GLOBAL;

--HELLO PL/SQL 출력
SET SERVEROUTPUT ON;
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO, PL/SQL');
END;

-- 기본 변수 선언과 사용
DECLARE 
    V_EMPNO NUMBER(4):= 7777;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME:='CONAN';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO:' || V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME:' || V_ENAME);
END;

--상수 정의하기
DECLARE
    V_TAX CONSTANT NUMBER(1):=5;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_TAX:' || V_TAX);
END;

--변수의 기본값 지정하기 : DEFAULT 
DECLARE
    V_DEPTNO NUMBER(2) DEFAULT 10;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_DEPTNO:' || V_DEPTNO);
END;

--변수에 NULL값 저장 막기 : NOT NULL
DECLARE 
    V_DEPTNO NUMBER(2) NOT NULL:=10;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_DEPTNO:' || V_DEPTNO);
END;

-- 상수 정의하기
DECLARE 
    V_TAX CONSTANT NUMBER(1):=5;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_TAX:' || V_TAX);
END;

--변수의 자료형 
DECLARE
    V_DEPT_ROW DEPT%ROWTYPE;
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO V_DEPT_ROW
    FROM DEPT
    WHERE DEPTNO = 40;
    DBMS_OUTPUT.PUT_LINE('DEPTNO :' || V_DEPT_ROW.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME :' || V_DEPT_ROW.DNAME);
    DBMS_OUTPUT.PUT_LINE('LOC :' || V_DEPT_ROW.LOC);
END;

--CASE 조건문
DECLARE 
    ismale NUMBER(1);
BEGIN 
    ismale:=&성별;
 
    CASE ismale
        WHEN 1 THEN DBMS_OUTPUT.PUT_LINE('남자');
        WHEN 2 THEN DBMS_OUTPUT.PUT_LINE('여자');
        ELSE DBMS_OUTPUT.PUT_LINE('Third Thing');
    END CASE;
END;

--LOOP
DECLARE
    i NUMBER:=0;
BEGIN
    LOOP
    DBMS_OUTPUT.PUT_LINE(i);
    IF i>10 THEN
        EXIT;
    END IF;
    i:=i+1;
    END LOOP;
END;

--WHILE
DECLARE
    i NUMBER:=0;
BEGIN
    WHILE i<10 LOOP
    DBMS_OUTPUT.PUT_LINE(i);
    i:=i+1;
    END LOOP;
END;

--FOR
DECLARE 
    i NUMBER:=0;
BEGIN
    FOR i IN REVERSE 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE(i);
    END LOOP;
END;

--예외 처리
DECLARE 
    V_NUM NUMBER;
BEGIN
    V_NUM:=10/&분모;
EXCEPTION
    WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('0이외의 다른 값을 입력하시오');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('딴 오류 발생..');
END;
