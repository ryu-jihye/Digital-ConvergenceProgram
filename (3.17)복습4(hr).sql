SELECT
SUM(DISTINCT SALARY), -- 중복을 제외하고 합산
SUM(ALL SALARY), -- 모든 데이터를 합산
SUM(SALARY)
FROM EMPLOYEES;

SELECT
COUNT(*) -- COUNT : DISTINCT, ALL 중 하나를 선택(안하기도 함) + 개수를 구할 열이나 데이터
FROM EMPLOYEES;

SELECT 
COUNT(*)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30; --부서 번호가 30번인 사원 수

SELECT
COUNT(COMMISSION_PCT) -- COUNT 사용 시 NULL 데이터는 제외한 데이터 개수 반환
FROM EMPLOYEES;

SELECT
COUNT(COMMISSION_PCT)  -- COUNT 사용 시 NULL 데이터는 제외한 데이터 개수 반환
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

-- 부서번호가 10번은 사원들의 최대 급여, 최소 급여 출력
SELECT 
MAX(SALARY) AS 최대,
MIN(SALARY) AS 최소
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10;

-- 부서 번호가 20인 사원의 입사일 중 가장 최근 입사일과 가장 오래된 입사일 출력하기
SELECT
MAX(HIRE_DATE) AS 최근입사일,
MIN(HIRE_DATE) AS 오래된입사일
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;

--부서 번호가 30인 사원들의 평균 급여 출력하기
SELECT 
AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;

-- 부서별 평균 급여를 부서 번호와 함께 출력하기
SELECT 
ROUND(AVG(SALARY),1) AS 평균급여, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID; --GROUP BY : 여러 데이터에서 의미있는 하나의 결과를 특정 열 값별로 묶어서 출력

--부서별 직무별 평균 급여 출력하기
SELECT
DEPARTMENT_ID, JOB_ID, ROUND(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY DEPARTMENT_ID, JOB_ID;

-- GROUP BY 유의점
-- 다중행 함수를 사용하지 않는 일반 열은 GROUP BY절에 명시하지 않으면 SELECT절에 사용 불가

--각 부서의 직무별 평급급여를 구하되 그 평균 급여가 2000이상인 그룹만 출력
SELECT
DEPARTMENT_ID, JOB_ID, ROUND(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
HAVING ROUND(AVG(SALARY)) >= 2000 --HAVING을 통해 평균값이 2000이상인 경우만 출력
ORDER BY DEPARTMENT_ID, JOB_ID;

-- HAVING 사용 시 유의점
-- WHERE절은 출력 대상 행을 제한
-- HAVING절은 그룹화된 대상을 출력에서 제한

-- WHERE과 HAVING절의 차이
-- WHERE이 GROUP BY, HAVING보다 먼저 실행됨

--HAVING만 사용하는 경우
SELECT 
DEPARTMENT_ID, JOB_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
HAVING AVG(SALARY) >= 2000
ORDER BY DEPARTMENT_ID, JOB_ID;

-- WHERE, HAVING 절을 사용하는 경우
SELECT 
DEPARTMENT_ID, JOB_ID, AVG(SALARY)
FROM EMPLOYEES
WHERE SALARY <= 3000 --급여 3000 초과하는 경우 제외
GROUP BY DEPARTMENT_ID, JOB_ID
HAVING AVG(SALARY) >= 2000
ORDER BY DEPARTMENT_ID, JOB_ID;

-- 조인 : 두 개 이상의 테이블을 연결하여 하나의 테이블처럼 출력

-- 사원정보와 더불어 근무 부서 이름 또는 부서 위치 정보 등 조회
SELECT *
FROM EMPLOYEES, DEPARTMENTS
ORDER BY DEPARTMENT_ID;

SELECT * 
FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
ORDER BY EMPLOYEE_ID;

SELECT *
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY EMPLOYEE_ID;

-- EMPLOYEES 테이블 별칭을 E, DEPARTMENT 테이블 별칭을 D라고 하고
-- 사원번호와 부서 이름 출력하기
SELECT E.EMPLOYEE_ID, D.DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY EMPLOYEE_ID;


-- 등가조인
-- 여러 테이블의 열 이름이 같을 때
SELECT EMPLOYEE_ID, FIRST_NAME, E.DEPARTMENT_ID, DEPARTMENT_NAME, JOB_ID
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY EMPLOYEE_ID;

-- WHERE절 조건식 추가하여 출력범위 설정
-- 사원번호, 이름 , 급여, 근무 부서와 함께 출력하되 급여가 3000이상인 데이터만 출력하기
SELECT
E.EMPLOYEE_ID, E.FIRST_NAME, E.SALARY, E.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND SALARY >= 3000;

