-- 레코드 출력하기
DESC MEMBERS;
SELECT * FROM MEMBERS;

DECLARE 
    V_MD VARCHAR2(50);
    V_PWD VARCHAR2(50);
    CURSOR CUR_MEMBER IS SELECT MD, PWD FROM MEMBERS; --커서 생성
BEGIN 
    OPEN CUR_MEMBER; --커서 사용 시작
    FETCH CUR_MEMBER INTO V_MD, V_PWD; --행 데이터 가져 옴
    DBMS_OUTPUT.PUT_LINE(V_MD);
    CLOSE CUR_MEMBER; -- 커서 사용 종료
END;
/

--결과집합 출력하기
DECLARE 
    V_MD VARCHAR2(50);
    V_PWD VARCHAR2(50);
    CURSOR CUR_MEMBER IS SELECT MD, PWD FROM MEMBERS;
BEGIN
    OPEN CUR_MEMBER;
    FETCH CUR_MEMBER INTO V_MD, V_PWD;
    DBMS_OUTPUT.PUT_LINE(V_MD);
    CLOSE CUR_MEMBER;
END;

----------------------------------------------------

CREATE TABLE JOB (
EMPNO NUMBER(4),
ENAME VARCHAR2(10),
JOB VARCHAR2(10),
DEPTNO NUMBER(2)
);

INSERT INTO JOB (EMPNO, ENAME, JOB, DEPTNO)
VALUES(001, '한여진', '경찰', 24);

INSERT INTO JOB (EMPNO, ENAME, JOB, DEPTNO)
VALUES(002, '황시목', '검사', 37);

INSERT INTO JOB (EMPNO, ENAME, JOB, DEPTNO)
VALUES(003, '강원철', '검사', 50);

INSERT INTO JOB (EMPNO, ENAME, JOB, DEPTNO)
VALUES(004, '장건', '경찰', 22);

INSERT INTO JOB (EMPNO, ENAME, JOB, DEPTNO)
VALUES(005, '이연재', 'CEO', 80);

SELECT * FROM JOB;

-- 커서 생성
DECLARE 
    V_ENAME VARCHAR2(50);
    V_JOB VARCHAR2(50);
    CURSOR CUR_JOB IS SELECT ENAME, JOB FROM JOB;
BEGIN 
    OPEN CUR_JOB;
    FETCH CUR_JOB INTO V_ENAME, V_JOB;
    DBMS_OUTPUT.PUT_LINE(V_ENAME || V_JOB);
    CLOSE CUR_JOB;
END;

DECLARE 
     V_ENAME VARCHAR2(50);
    V_JOB VARCHAR2(50);
    CURSOR CUR_JOB IS SELECT ENAME, JOB FROM JOB;
BEGIN 
    OPEN CUR_JOB;
    LOOP
    FETCH CUR_JOB INTO V_ENAME, V_JOB;
    IF CUR_JOB%NOTFOUND THEN -- 커서의 상태 확인
            EXIT;
    END IF;
    DBMS_OUTPUT.PUT_LINE(V_ENAME || V_JOB);
    END LOOP;
    CLOSE CUR_JOB;
END;


-- 익명 프로시저
DECLARE
   CURSOR CUR_JOB IS SELECT * FROM JOB; -- 커서 선언
   V_JOB JOB%ROWTYPE; --변수 선언, 모든 열의 데이터를 갖고 옴(행참조 : %ROWTYPE)
BEGIN
    OPEN CUR_JOB; --커서 열기
    LOOP --반복
    FETCH CUR_JOB INTO V_JOB; --CUR_JOB의 한 행을 V_JOB에 넣음
    IF CUR_JOB%NOTFOUND THEN
    EXIT;
    END IF; --조건문을 통해 루프 탈출
    DBMS_OUTPUT.PUT_LINE('EMPNO :' || V_JOB.EMPNO ||
                         'ENAME :' || V_JOB.ENAME ||
                         'JOB :' || V_JOB.JOB ||
                         'DEPTNO :' || V_JOB.DEPTNO);
    END LOOP;
    CLOSE CUR_JOB;
END;

SELECT * FROM JOB;

--저장 프로시저는 EXECUTE로 실행
CREATE OR REPLACE PROCEDURE VALIDATE_JOB
(
    V_EMPNO JOB.EMPNO%TYPE,
    V_DEPTNO JOB.DEPTNO%TYPE
)
AS
    V_JOB JOB%ROWTYPE;
    CURSOR CUR_JOB IS SELECT * FROM JOB WHERE EMPNO = V_EMPNO;
BEGIN
    OPEN CUR_JOB;
    FETCH CUR_JOB INTO V_JOB;
    IF CUR_JOB%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('회원번호 불일치');
    ELSIF V_DEPTNO <> V_JOB.DEPTNO THEN
        DBMS_OUTPUT.PUT_LINE('부서번호 불일치');
    ELSE
        DBMS_OUTPUT.PUT_LINE('인증 성공');
    END IF;
CLOSE CUR_JOB;
END;

EXECUTE VALIDATE_JOB(1, 37);
EXECUTE VALIDATE_JOB(4, 22);

--삽입 작업을 하는 프로시저
CREATE TABLE CAFE(
CAFEID NUMBER(20), 
CAFENAME VARCHAR2(20), 
CORPORATION VARCHAR2(20),
PRICE NUMBER(10)
);

CREATE OR REPLACE PROCEDURE INSERTCAFE(
    mCAFEID IN NUMBER,
    mCAFENAME IN VARCHAR2,
    mCORPORATION IN VARCHAR2,
    mPRICE IN NUMBER)
AS 
BEGIN 
    INSERT INTO CAFE(CAFEID, CAFENAME, CORPORATION, PRICE)
    VALUES(mCAFEID, mCAFENAME, mCORPORATION, mPRICE);
END;

EXEC INSERTCAFE(14, '스타벅스', '신세계', 7000);
EXEC INSERTCAFE(20, '이디야', '이디야', 4500);
EXEC INSERTCAFE(03, '빽다방', '백종원', 3000);
SELECT * FROM CAFE;

-- 동일한 카페명이 있는지 점검 후 삽입하는 프로시저
CREATE OR REPLACE PROCEDURE CAFEINSERTORUPDATE(
mCAFEID IN NUMBER,
    mCAFENAME IN VARCHAR2,
    mCORPORATION IN VARCHAR2,
    mPRICE IN NUMBER)
AS 
    mycount NUMBER;
BEGIN
    SELECT COUNT(*) INTO mycount FROM CAFE
    WHERE CAFENAME LIKE mCAFENAME;
    IF mycount!=0 THEN
        UPDATE CAFE SET PRICE = mPRICE
        WHERE CAFENAME LIKE mCAFENAME;
    ELSE 
        INSERT INTO CAFE(CAFEID, CAFENAME, CORPORATION, PRICE)
        VALUES(mCAFEID, mCAFENAME, mCORPORATION, mPRICE);
    END IF;
END;

EXEC CAFEINSERTORUPDATE(50, '폴바셋', '매일유업', 8000);
EXEC CAFEINSERTORUPDATE(14, '싼커피', '편의점', 1500);
EXEC CAFEINSERTORUPDATE(14, '싼커피', '편의점', 1000);
SELECT * FROM CAFE;