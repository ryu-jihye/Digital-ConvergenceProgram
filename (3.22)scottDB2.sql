-- 땡땡서점 데이터를 위한 테이블 생성

CREATE TABLE BOOK(
BOOKID NUMBER(2) PRIMARY KEY,
BOOKNAME VARCHAR2(40),
PUBLISHER VARCHAR(40),
PRICE NUMBER(8)
);
CREATE TABLE CUSTOMER(
CUSTID NUMBER(2) PRIMARY KEY,
NAME VARCHAR2(40),
ADDRESS VARCHAR2(50),
PHONE VARCHAR2(20)
);
CREATE TABLE ORDERS(
ORDERID NUMBER(2) PRIMARY KEY,
CUSTID NUMBER(2) REFERENCES CUSTOMER(CUSTID),
BOOKID NUMBER(2) REFERENCES BOOK(BOOKID),
SALEPRICE NUMBER(8),
ORDERDATE DATE
);

DESC BOOK;
DESC CUSTOMER;
DESC ORDERS;

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('1', '축구의 역사', '굿스포츠', 7000);

SELECT * FROM BOOK;

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('2', '축구 아는 여자', '나무수', 13000);

SELECT * FROM BOOK;

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('3', '축구의 이해', '대한미디어', 22000);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('4', '골프 바이블', '대한미디어', 35000);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('5', '피겨 교본', '굿스포츠', 8000);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('6', '배구의 기술', '굿스포츠', 6000);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('7', '야구의 추억', '이상미디어', 20000);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('8', '야구를 부탁해', '이상미디어', 13000);

SELECT * FROM BOOK;

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('9', '올림픽 이야기', '삼성당', 7500);

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES ('10', 'Olympic Champions', 'Pearson', 13000);

SELECT * FROM BOOK;

INSERT INTO CUSTOMER(CUSTID, NAME, ADDRESS, PHONE)
VALUES ('1', '손흥민', '영국 런던', '000-5000-0001');

SELECT * FROM CUSTOMER;

INSERT INTO CUSTOMER(CUSTID, NAME, ADDRESS, PHONE)
VALUES ('2', '김연아', '대한민국 서울', '000-6000-0001');

INSERT INTO CUSTOMER(CUSTID, NAME, ADDRESS, PHONE)
VALUES ('3', '김연경', '대한민국 인천', '000-7000-0001');

INSERT INTO CUSTOMER(CUSTID, NAME, ADDRESS, PHONE)
VALUES ('4', '류현진', '캐나다 토론토', '000-8000-0001');

INSERT INTO CUSTOMER(CUSTID, NAME, ADDRESS, PHONE)
VALUES ('5', '박세리', '대한민국 대전', NULL);

SELECT * FROM CUSTOMER;

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('1', '1', '1', 6000, '2014-07-01');

SELECT * FROM ORDERS;

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('2', '1', '3', 21000, '2014-07-03');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('3', '2', '5', 8000, '2014-07-03');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('4', '3', '6', 6000, '2014-07-04');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('5', '4', '7', 20000, '2014-07-05');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('6', '1', '2', 12000, '2014-07-07');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('7', '4', '8', 13000, '2014-07-07');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('8', '3', '10', 12000, '2014-07-08');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('9', '2', '10', 7000, '2014-07-09');

INSERT INTO ORDERS(ORDERID, CUSTID, BOOKID, SALEPRICE, ORDERDATE)
VALUES ('10', '3', '8', 13000, '2014-07-10');

SELECT * FROM ORDERS;

SELECT * FROM BOOK;
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;

--고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬하여 출력하기
SELECT NAME, SUM(SALEPRICE)
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
GROUP BY CUSTOMER.NAME
ORDER BY CUSTOMER.NAME;

-- 고객의 이름(CUSTOMER)과 주문한(ORDERS) 도서의 이름(BOOK) 출력
SELECT CUSTOMER.NAME, BOOK.BOOKNAME
FROM CUSTOMER, ORDERS, BOOK
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
        AND ORDERS.BOOKID = BOOK.BOOKID;
        
-- 가격이 20000원인 도서를 주문한 고객의 이름과 도서의 이름 출력하기
SELECT CUSTOMER.NAME, BOOK.BOOKNAME
FROM CUSTOMER, ORDERS, BOOK
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
        AND ORDERS.BOOKID = BOOK.BOOKID
        AND BOOK.PRICE = 20000;
        
        
        
-- 연습문제
-- 1) 고객별 구매한 도서 수량 출력하기(0권 구매자 포함)

DESC BOOK;

SELECT C.NAME,COUNT(O.CUSTID) AS "구매수량" --구매수량 : 이름을 기준으로 고객 아이디로 개수 세기
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID(+) -- 고객과 주문의 각각 ID 일치(왼쪽 조인, C.CUSTID 부분 NULL)
GROUP BY O.CUSTID, C.NAME;


DESC ORDERS;

-- 2) 도서별 판매수량 출력하기

SELECT B.BOOKNAME, B.PRICE, COUNT(O.BOOKID) AS "판매수량"
FROM BOOK B, ORDERS O
WHERE B.BOOKID = O.BOOKID(+) --왼쪽 조인, B.BOOKID부분 NULL
GROUP BY O.BOOKID, B.BOOKNAME, B.PRICE;


SELECT BOOK.BOOKNAME, BOOK.PRICE, COUNT(ORDERS.BOOKID) AS "판매수량"
FROM BOOK, ORDERS
WHERE BOOK.BOOKID = ORDERS.BOOKID(+)
GROUP BY ORDERS.BOOKID, BOOK.BOOKNAME, BOOK.PRICE;
----------------------------------------------------------제약조건

--기본키를 지정하는 경우
CREATE TABLE NEWBOOK (
BOOKID NUMBER,
BOOKNAME VARCHAR2(20),
PUBLISHER VARCHAR2(20),
PRICE NUMBER,
PRIMARY KEY(BOOKID)
);

DESC NEWBOOK;

DROP TABLE NEWBOOK;


-- 제약 조건이 있는 테이블 형성(NOT NULL)
-- BOOKNAME = NULL 값 가질 수 없다
-- PUBLISHER = 같은 값이 있으면 안 됨
-- PRICE값이 입력되지 않는 경우 기본 값 10000을 저장한다 또 가격은 최소 2000원 이상으로 한다

CREATE TABLE NEWBOOK (
BOOKNAME VARCHAR(20) NOT NULL,
PUBLISHER VARCHAR(20) UNIQUE,
PRICE NUMBER DEFAULT 10000 CHECK(PRICE > 2000),
PRIMARY KEY(BOOKNAME, PUBLISHER)
);

DESC NEWBOOK;

CREATE TABLE NEWCUSTOMER (
CUSTID NUMBER PRIMARY KEY,
NAME VARCHAR2(40),
ADDRESS VARCHAR(40),
PHONE VARCHAR2(30)
);

DESC NEWCUSTOMER;

INSERT INTO NEWBOOK
--VALUES(NULL, 'AAA', 5000); --> 오류 발생 : 이름에 NOT NULL 입력 불가
VALUES('쥐덪', '혜문', 5000);
INSERT INTO NEWBOOK
VALUES('셜록홈즈', '코난도일', 7000); -- 각 값은 UNIQUE해야 함
INSERT INTO NEWBOOK
VALUES('행복한 왕자', '대교', 20000); --NULL값은 삽입 불가
INSERT INTO NEWBOOK(BOOKNAME, PUBLISHER)
VALUES('무소유', '법정'); -- DEFAULT가 10000으로 고정
INSERT INTO NEWBOOK
VALUES('어린왕자', '생택쥐페리', 1000); --제약조건에 위배(2000원 초과해야 함)

SELECT * FROM NEWBOOK;

INSERT INTO NEWCUSTOMER
VALUES(001, '빙그레', '서울대입구', '001');
INSERT INTO NEWCUSTOMER
VALUES(002, '쿠키런', '강남', '002');

SELECT * FROM NEWCUSTOMER;

SELECT * FROM USER_CONSTRAINTS;


CREATE TABLE NEWORDERS (
ORDERID NUMBER,
CUSTID NUMBER,
BOOKID NUMBER,
SALEPRICE NUMBER,
ORDERDATE DATE,
PRIMARY KEY (ORDERID),
FOREIGN KEY (CUSTID) REFERENCES NEWCUSTOMER(CUSTID) ON DELETE CASCADE
);

DESC NEWORDERS;

SELECT * FROM NEWBOOK;
SELECT * FROM NEWCUSTOMER;
SELECT * FROM NEWORDERS;

INSERT INTO NEWCUSTOMER
VALUES(1, 'CONAN', 'MIRANS', '010-1111-1111');

INSERT INTO NEWORDERS
VALUES(1, 1, 1, 400, 7000, TO_DATE('2021-01-01', 'YYYY-MM-DD'));

DELETE FROM ORDERS
WHERE CUSTID = 2;

DELETE FROM CUSTOMER
WHERE CUSTID = 2;

SELECT * FROM ORDERS;
SELECT * FROM CUSTOMER;


DELETE FROM NEWCUSTOMER
WHERE CUSTID = 3;

UPDATE CUSTOMER
SET CUSTID = 33
WHERE CUSTID = 3; --수정 삭제 안됨(처음부터 X, 자식 테이블을 바꿔야 부모 테이블 변경 가능)



--1) 추가
ALTER TABLE NEWORDERS
ADD ISBN VARCHAR2(13);

--2) 변경
ALTER TABLE NEWORDERS
MODIFY ISBN NUMBER;

INSERT INTO NEWBOOK
VALUES('행복한 왕자', '모름', 14000, '1111');

--UPDATE NEWBOOK
--SET ISBN = NULL
--WHERE BOOKNAME = '행복한 왕자; 

SELECT * FROM NEWORDERS;

--3) 삭제
ALTER TABLE NEWORDERS
DROP COLUMN ISBN;

-- 4) 추가
ALTER TABLE NEWBOOK
ADD BOOKID NUMBER;


--5) NOT NULL 제약조건
ALTER TABLE NEWBOOK
ADD BOOKIDS NUMBER NOT NULL;

--6) 기본키
ALTER TABLE NEWBOOK
ADD BOOKIDS NUMBER PRIMARY KEY;

SELECT * FROM NEWBOOK;

INSERT INTO NEWCUSTOMER
VALUES(1, 'CONAN', 'MIRANS', '010-1111-1111');

DROP TABLE NEWCUSTOMER;
DROP TABLE NEWORDERS;

INSERT INTO NEWORDERS
VALUES(1, 1, 1, 7000, TO_DATE('2021-01-01', 'YYYY-MM-DD'));

SELECT * FROM CUSTOMER;

SELECT ROWNUM "순번", CUSTID, NAME, PHONE
FROM CUSTOMER
WHERE ROWNUM <=2;

SELECT * FROM CUSTOMER
WHERE ROWNUM BETWEEN 1 AND 3;

-------------------------------------------------
SELECT * FROM DICTIONARY
WHERE TABLE_NAME LIKE 'USER_%';

SELECT * FROM DBA_TABLES;
SELECT * FROM ALL_TABLES;


SELECT * FROM DICTIONARY
WHERE TABLE_NAME LIKE 'USER_%';

SELECT TABLE_NAME
FROM USER_TABLES;

SELECT OWNER, TABLE_NAME
FROM ALL_TABLES;

SELECT * FROM DBA_TABLES;

--인덱스
-- 데이터 검색 기능향상을 위함
CREATE INDEX IDX_BOOK_PRICE
ON BOOK(PRICE);

CREATE VIEW VW_EMP20
AS (SELECT EMPNO, ENAME, JOB, DEPTNO
    FROM EMP
    WHERE DEPTNO = 20);

SELECT * FROM VW_EMP20;

--인라인뷰 : 1회성, 이후에도 필요한 경우 CREATE로 진행
---EMP 테이블을 SAL 기준으롲 정렬하여 ROWNUM과 같이 출력
WITH E AS (SELECT * FROM EMP ORDER BY SAL DESC)
SELECT ROWNUM, E.*
FROM EMP E;

-- 급여가 높은 상위 세 명의 데이터 출력하기
WITH E AS (SELECT * FROM EMP ORDER BY SAL DESC)
SELECT ROWNUM, E.*
FROM EMP E
WHERE ROWNUM <= 3;

--SEQUENCE : 연속적으로 숫자를 생성하는 객체

--DEPT 테이블과 열 구성은 같고 데이터는 없는 테이블 생성
CREATE TABLE DEPT_SEQUENCE
    AS SELECT * FROM DEPT
    WHERE 1<>1;
    
SELECT * FROM DEPT_SEQUENCE;

CREATE SEQUENCE SEQ_DEPT_SEQUENCE
INCREMENT BY 10 --번호의 증가값
START WITH 10 -- 번호의 시작값
MAXVALUE 90 --최댓값 지정
MINVALUE 0 --최솟값 지정
NOCYCLE --최댓값에 도달했을 경우 재시작 여부
CACHE 2;

SELECT * FROM USER_SEQUENCES;

--시퀀스 사용 : CURRVAL - 마지막으로 생성한 번호, 시퀀스를 생성한 후 바로 사용하면 오류 발생
SELECT SEQ_DEPT_SEQUENCE.CURRVAL --> INSERT 후 CURRVAL 수행 -> 10이 나옴
FROM DUAL; -->시퀀스 SEQ_DEPT_SEQUENCE.CURRVAL은 이 세션에서는 정의 되어 있지 않습니다

INSERT INTO DEPT_SEQUENCE (DEPTNO, DNAME, LOC)
VALUES(SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE', 'SEOUL');

SELECT * FROM DEPT_SEQUENCE;
